
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   16.1   Copyright 1985-2019 StataCorp LLC
  Statistics/Data analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        https://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Stata license: Single-user  perpetual
Serial number: 401606291706
  Licensed to: masaya obino
               george washington university

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. Maximum number of variables is set to 5,000; see help set_maxvar.

. do rdd.do 

. *1
. clear

. 
. use https://github.com/scunning1975/causal-inference-class/raw/master/hansen_
> dwi, clear

. 
. *3
. gen DUI = (bac1>=0.08)

. 
. *4
. histogram bac1, discrete width(0.001) fcolor(%80) lcolor(none) xline(0.08) fr
> equency xtitle("BAC ") title("BAC Distribution")
(start=0, width=.001)

. graph export "C:\Users\omasa\Documents\GitHub\RDD\writing\figure\hist.png", r
> eplace
(file C:\Users\omasa\Documents\GitHub\RDD\writing\figure\hist.png written in PN
> G format)

. 
. *5
. gen BAC = bac1 - 0.08

. 
. export delimited using data\hansen.csv, replace
file data\hansen.csv saved

. 
. eststo clear

. 
. eststo Male: reg male c.BAC##i.DUI if bac1>=0.03 & bac1<=0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(3, 99)          =       1.03
                                                Prob > F          =     0.3831
                                                R-squared         =     0.0001
                                                Root MSE          =     .40598

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
        male |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
         BAC |    -.20997   .2341962    -0.90   0.372     -.674666     .254726
       1.DUI |   .0061842   .0065714     0.94   0.349    -.0068549    .0192234
             |
   DUI#c.BAC |
          1  |   .3070719   .2629244     1.17   0.246    -.2146271    .8287709
             |
       _cons |   .7842362   .0054805   143.09   0.000     .7733616    .7951107
------------------------------------------------------------------------------

. estadd scalar mean = _b[BAC]*(-0.001)+_b[_cons]

added scalar:
               e(mean) =  .78444613

. estadd local controls "No"

added macro:
           e(controls) : "No"

. eststo White: reg white c.BAC##i.DUI if bac1>=0.03 & bac1<=0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(3, 99)          =       3.99
                                                Prob > F          =     0.0100
                                                R-squared         =     0.0001
                                                Root MSE          =     .35452

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
       white |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
         BAC |   .0787543   .2236752     0.35   0.726    -.3650658    .5225743
       1.DUI |   .0057037   .0047299     1.21   0.231    -.0036815    .0150889
             |
   DUI#c.BAC |
          1  |   .0156179   .2378427     0.07   0.948    -.4563137    .4875495
             |
       _cons |   .8462753   .0040921   206.81   0.000     .8381556     .854395
------------------------------------------------------------------------------

. estadd scalar mean = _b[BAC]*(-0.001)+_b[_cons]

added scalar:
               e(mean) =  .84619656

. estadd local controls "No"

added macro:
           e(controls) : "No"

. eststo Age: reg age c.BAC##i.DUI if bac1>=0.03 & bac1<=0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(3, 99)          =      68.22
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0023
                                                Root MSE          =     11.573

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
        aged |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
         BAC |  -69.16367   6.862434   -10.08   0.000    -82.78022   -55.54711
       1.DUI |  -.1404517    .150177    -0.94   0.352    -.4384355     .157532
             |
   DUI#c.BAC |
          1  |   76.04933   7.646735     9.95   0.000     60.87655    91.22211
             |
       _cons |   33.91989   .1187171   285.72   0.000     33.68433    34.15545
------------------------------------------------------------------------------

. estadd scalar mean = _b[BAC]*(-0.001)+_b[_cons]

added scalar:
               e(mean) =  33.989057

. estadd local controls "No"

added macro:
           e(controls) : "No"

. eststo ACC: reg acc c.BAC##i.DUI if bac1>=0.03 & bac1<=0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(3, 99)          =      33.61
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0015
                                                Root MSE          =     .30138

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
         acc |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
         BAC |  -1.095895   .1760635    -6.22   0.000    -1.445243   -.7465472
       1.DUI |  -.0033503   .0041098    -0.82   0.417     -.011505    .0048044
             |
   DUI#c.BAC |
          1  |   1.888365   .2027659     9.31   0.000     1.486033    2.290696
             |
       _cons |   .0834312   .0031539    26.45   0.000     .0771732    .0896893
------------------------------------------------------------------------------

. estadd scalar mean = _b[BAC]*(-0.001)+_b[_cons]

added scalar:
               e(mean) =  .08452712

. estadd local controls "No"

added macro:
           e(controls) : "No"

. 
. esttab using C:\Users\omasa\Documents\GitHub\RDD\writing\table\table2.tex, re
> place booktabs width(0.7\hsize) mgroups("Driver demographic characteristics",
>  pattern(1 0 0 1) prefix(\multicolumn{@span}{c}{)suffix(}) span erepeat(\cmid
> rule(lr){2-4})) b(3) se star not drop(BAC 0.DUI 0.DUI#c.BAC 1.DUI#c.BAC _cons
> ) stats(mean controls N, labels("Mean (at 0.079)" Controls Observations) fmt(
> %4.3f %8.0gc)) rename(1.DUI DUI) varwidth(15) collabels(none) mtitles("Male" 
> "White" "Age" "Accident") addnotes("Note: All regressions have a bandwidth of
>  0.05.") starlevels( * 0.10 ** 0.05 *** 0.010)  prefoot("")
(output written to C:\Users\omasa\Documents\GitHub\RDD\writing\table\table2.tex
> )

. 
. 
. 
. *6
. ** Linear Trend
. cmogram acc bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) lfi
> tci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writin
> g\figure\acc_l.png") legend graphopts(legend(order(1 4 3) label(1 "Accident")
>  rows(1)) color(gray)) title("Linear Fit")

Plotting mean of acc, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .17368421052631
> 58)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .11904761904761
> 9)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .09909909909909
> 91)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .10550458715596
> 33)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .12775330396475
> 77)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .09285714285714
> 29)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .13468013468013
> 47)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .13924050632911
> 39)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .152)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .1184834123222
> 749)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .1118421052631
> 579)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .1411764705882
> 353)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .0983302411873
> 84)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .1193277310924
> 37)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .1077348066298
> 343)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .0920245398773
> 006)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .095938375350
> 1401)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .1062992125984
> 252)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .095346197502
> 8377)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .0830721003134
> 796)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .089423513390
> 8307)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .0824468085106
> 383)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .085490668272
> 1252)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .093803297328
> 0273)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .088735387885
> 2285)
Bin #1: [.08,.082] (n = 979) (mean = .0878447395301328)
Bin #2: (.082,.084] (n = 3233) (mean = .0878441076399629)
Bin #3: (.084,.086] (n = 1053) (mean = .0892687559354226)
Bin #4: (.086,.088] (n = 3467) (mean = .0833573694837035)
Bin #5: (.088,.09] (n = 1270) (mean = .0818897637795276)
Bin #6: (.09,.092] (n = 2463) (mean = .0946000812017864)
Bin #7: (.092,.094] (n = 3887) (mean = .0951890918446102)
Bin #8: (.094,.096] (n = 1324) (mean = .0740181268882175)
Bin #9: (.096,.098] (n = 4052) (mean = .0920533070088845)
Bin #10: (.098,.1] (n = 1439) (mean = .088950660180681)
Bin #11: (.1,.102] (n = 4300) (mean = .0934883720930233)
Bin #12: (.102,.104] (n = 1479) (mean = .0899256254225828)
Bin #13: (.104,.106] (n = 4525) (mean = .0992265193370166)
Bin #14: (.106,.108] (n = 1447) (mean = .0953697304768487)
Bin #15: (.108,.11] (n = 4531) (mean = .1074817920988744)
Bin #16: (.11,.112] (n = 1564) (mean = .0978260869565217)
Bin #17: (.112,.114] (n = 3139) (mean = .1086333227142402)
Bin #18: (.114,.116] (n = 4699) (mean = .1076824856352415)
Bin #19: (.116,.118] (n = 1519) (mean = .0954575378538512)
Bin #20: (.118,.12] (n = 4685) (mean = .1056563500533618)
Bin #21: (.12,.122] (n = 1666) (mean = .1236494597839136)
Bin #22: (.122,.124] (n = 4809) (mean = .116448326055313)
Bin #23: (.124,.126] (n = 1589) (mean = .1126494650723726)
Bin #24: (.126,.128] (n = 3171) (mean = .1292967518133081)
Bin #25: (.128,.13] (n = 4785) (mean = .1174503657262278)
Bin #26: (.13,.132] (n = 3215) (mean = .1213063763608087)
Bin #27: (.132,.134] (n = 1604) (mean = .1265586034912718)
Bin #28: (.134,.136] (n = 3268) (mean = .1251529987760098)
Bin #29: (.136,.138] (n = 4873) (mean = .1212805253437308)
Bin #30: (.138,.14] (n = 1590) (mean = .1408805031446541)
Bin #31: (.14,.142] (n = 3307) (mean = .12881765951013)
Bin #32: (.142,.144] (n = 4757) (mean = .136640739962161)
Bin #33: (.144,.146] (n = 3077) (mean = .1394215144621384)
Bin #34: (.146,.148] (n = 1594) (mean = .1355081555834379)
Bin #35: (.148,.15] (n = 3272) (mean = .1405867970660147)

. cmogram male bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) lf
> itci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writi
> ng\figure\male_l.png") legend graphopts(legend(order(1 4 3) label(1 "Male") r
> ows(1)) color(gray)) title("Linear Fit")

Plotting mean of male, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .83157894736842
> 11)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .79523809523809
> 52)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .77477477477477
> 47)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .75688073394495
> 41)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .77973568281938
> 32)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .78928571428571
> 43)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .80471380471380
> 47)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .81223628691983
> 12)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .82133333333333
> 34)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .7914691943127
> 962)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .7916666666666
> 666)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .7490196078431
> 373)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .8033395176252
> 319)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .7781512605042
> 017)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .8093922651933
> 702)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .8159509202453
> 987)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .768907563025
> 2101)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .7401574803149
> 606)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .766174801362
> 0885)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .7789968652037
> 618)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .781661370857
> 921)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .8231382978723
> 404)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .800722456351
> 5954)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .780557134735
> 6453)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .788522848034
> 0064)
Bin #1: [.08,.082] (n = 979) (mean = .7711950970377937)
Bin #2: (.082,.084] (n = 3233) (mean = .7819362820909372)
Bin #3: (.084,.086] (n = 1053) (mean = .7996201329534662)
Bin #4: (.086,.088] (n = 3467) (mean = .7992500721084511)
Bin #5: (.088,.09] (n = 1270) (mean = .7960629921259843)
Bin #6: (.09,.092] (n = 2463) (mean = .7726349979699554)
Bin #7: (.092,.094] (n = 3887) (mean = .7887831232312837)
Bin #8: (.094,.096] (n = 1324) (mean = .7885196374622356)
Bin #9: (.096,.098] (n = 4052) (mean = .7966436327739388)
Bin #10: (.098,.1] (n = 1439) (mean = .7956914523974983)
Bin #11: (.1,.102] (n = 4300) (mean = .8069767441860465)
Bin #12: (.102,.104] (n = 1479) (mean = .7971602434077079)
Bin #13: (.104,.106] (n = 4525) (mean = .7882872928176795)
Bin #14: (.106,.108] (n = 1447) (mean = .8147892190739461)
Bin #15: (.108,.11] (n = 4531) (mean = .797837122048113)
Bin #16: (.11,.112] (n = 1564) (mean = .790920716112532)
Bin #17: (.112,.114] (n = 3139) (mean = .7881490920675375)
Bin #18: (.114,.116] (n = 4699) (mean = .7935731006597149)
Bin #19: (.116,.118] (n = 1519) (mean = .7801184990125082)
Bin #20: (.118,.12] (n = 4685) (mean = .792102454642476)
Bin #21: (.12,.122] (n = 1666) (mean = .8199279711884754)
Bin #22: (.122,.124] (n = 4809) (mean = .7903930131004366)
Bin #23: (.124,.126] (n = 1589) (mean = .7816236626809314)
Bin #24: (.126,.128] (n = 3171) (mean = .7984862819299905)
Bin #25: (.128,.13] (n = 4785) (mean = .7914315569487983)
Bin #26: (.13,.132] (n = 3215) (mean = .7975116640746501)
Bin #27: (.132,.134] (n = 1604) (mean = .7899002493765586)
Bin #28: (.134,.136] (n = 3268) (mean = .8026315789473685)
Bin #29: (.136,.138] (n = 4873) (mean = .7937615431972092)
Bin #30: (.138,.14] (n = 1590) (mean = .8050314465408805)
Bin #31: (.14,.142] (n = 3307) (mean = .7892349561536135)
Bin #32: (.142,.144] (n = 4757) (mean = .784528063905823)
Bin #33: (.144,.146] (n = 3077) (mean = .783230419239519)
Bin #34: (.146,.148] (n = 1594) (mean = .8067754077791719)
Bin #35: (.148,.15] (n = 3272) (mean = .784841075794621)

. cmogram age bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) lfi
> tci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writin
> g\figure\age_l.png") legend graphopts(legend(order(1 4 3) label(1 "Age") rows
> (1)) color(gray)) title("Linear Fit")

Plotting mean of aged, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = 37.310526315789
> 47)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = 38.252380952380
> 95)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = 36.833333333333
> 34)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = 36.215596330275
> 23)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = 37.881057268722
> 46)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = 37.110714285714
> 29)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = 36.181818181818
> 18)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = 36.107594936708
> 86)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = 36.093333333333
> 33)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = 36.19431279620
> 853)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = 35.93640350877
> 193)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = 34.96862745098
> 039)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = 34.91651205936
> 92)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = 35.45210084033
> 614)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = 35.05386740331
> 492)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = 35.23067484662
> 577)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = 35.0021008403
> 3613)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = 34.38779527559
> 055)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = 34.8825198637
> 9115)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = 34.72884012539
> 185)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = 34.4412165229
> 2328)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = 34.12898936170
> 212)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = 34.1583383503
> 9133)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = 34.6384309266
> 6288)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = 33.7662061636
> 5569)
Bin #1: [.08,.082] (n = 979) (mean = 34.34320735444331)
Bin #2: (.082,.084] (n = 3233) (mean = 33.92483761212496)
Bin #3: (.084,.086] (n = 1053) (mean = 33.66856600189934)
Bin #4: (.086,.088] (n = 3467) (mean = 33.67637727141621)
Bin #5: (.088,.09] (n = 1270) (mean = 33.84488188976378)
Bin #6: (.09,.092] (n = 2463) (mean = 33.70361347949655)
Bin #7: (.092,.094] (n = 3887) (mean = 34.10393619758168)
Bin #8: (.094,.096] (n = 1324) (mean = 34.01737160120846)
Bin #9: (.096,.098] (n = 4052) (mean = 33.80676209279368)
Bin #10: (.098,.1] (n = 1439) (mean = 34.20361362056984)
Bin #11: (.1,.102] (n = 4300) (mean = 34.1093023255814)
Bin #12: (.102,.104] (n = 1479) (mean = 33.4604462474645)
Bin #13: (.104,.106] (n = 4525) (mean = 33.82696132596685)
Bin #14: (.106,.108] (n = 1447) (mean = 33.69523151347616)
Bin #15: (.108,.11] (n = 4531) (mean = 33.76914588391084)
Bin #16: (.11,.112] (n = 1564) (mean = 34.04092071611253)
Bin #17: (.112,.114] (n = 3139) (mean = 33.63459700541573)
Bin #18: (.114,.116] (n = 4699) (mean = 34.10661842945308)
Bin #19: (.116,.118] (n = 1519) (mean = 34.1909150757077)
Bin #20: (.118,.12] (n = 4685) (mean = 33.91824973319103)
Bin #21: (.12,.122] (n = 1666) (mean = 34.6578631452581)
Bin #22: (.122,.124] (n = 4809) (mean = 33.96069868995633)
Bin #23: (.124,.126] (n = 1589) (mean = 34.04216488357458)
Bin #24: (.126,.128] (n = 3171) (mean = 34.35950804162724)
Bin #25: (.128,.13] (n = 4785) (mean = 34.24514106583072)
Bin #26: (.13,.132] (n = 3215) (mean = 33.87682737169518)
Bin #27: (.132,.134] (n = 1604) (mean = 33.76620947630923)
Bin #28: (.134,.136] (n = 3268) (mean = 34.04651162790697)
Bin #29: (.136,.138] (n = 4873) (mean = 34.23394213010466)
Bin #30: (.138,.14] (n = 1590) (mean = 34.30377358490566)
Bin #31: (.14,.142] (n = 3307) (mean = 34.25491381917146)
Bin #32: (.142,.144] (n = 4757) (mean = 34.33025015766239)
Bin #33: (.144,.146] (n = 3077) (mean = 34.26746831329217)
Bin #34: (.146,.148] (n = 1594) (mean = 34.60351317440401)
Bin #35: (.148,.15] (n = 3272) (mean = 34.65006112469437)

. cmogram white bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) l
> fitci  histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\wri
> ting\figure\white_l.png") legend graphopts(legend(order(1 4 3) label(1 "White
> ") rows(1)) color(gray)) title("Linear Fit")

Plotting mean of white, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .79473684210526
> 32)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .87619047619047
> 62)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .81531531531531
> 53)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .85321100917431
> 19)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .84140969162995
> 59)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .84642857142857
> 14)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .85521885521885
> 52)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .87341772151898
> 73)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .84533333333333
> 34)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .8270142180094
> 787)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .8442982456140
> 351)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .8352941176470
> 589)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .8497217068645
> 641)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .8655462184873
> 95)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .8480662983425
> 414)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .8319018404907
> 975)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .848039215686
> 2745)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .8267716535433
> 071)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .841657207718
> 5017)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .8526645768025
> 078)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .834770767135
> 7241)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .8364361702127
> 66)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .857314870559
> 9036)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .843661171119
> 9545)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .852816153028
> 6928)
Bin #1: [.08,.082] (n = 979) (mean = .8723186925434117)
Bin #2: (.082,.084] (n = 3233) (mean = .8530776368697804)
Bin #3: (.084,.086] (n = 1053) (mean = .8603988603988604)
Bin #4: (.086,.088] (n = 3467) (mean = .8505912892991059)
Bin #5: (.088,.09] (n = 1270) (mean = .8448818897637795)
Bin #6: (.09,.092] (n = 2463) (mean = .8534307754770605)
Bin #7: (.092,.094] (n = 3887) (mean = .8471829174170311)
Bin #8: (.094,.096] (n = 1324) (mean = .8527190332326284)
Bin #9: (.096,.098] (n = 4052) (mean = .8499506416584403)
Bin #10: (.098,.1] (n = 1439) (mean = .8665740097289785)
Bin #11: (.1,.102] (n = 4300) (mean = .8490697674418605)
Bin #12: (.102,.104] (n = 1479) (mean = .8586883029073699)
Bin #13: (.104,.106] (n = 4525) (mean = .8552486187845304)
Bin #14: (.106,.108] (n = 1447) (mean = .8507256392536282)
Bin #15: (.108,.11] (n = 4531) (mean = .8538953873317149)
Bin #16: (.11,.112] (n = 1564) (mean = .8465473145780051)
Bin #17: (.112,.114] (n = 3139) (mean = .8684294361261549)
Bin #18: (.114,.116] (n = 4699) (mean = .8525218131517344)
Bin #19: (.116,.118] (n = 1519) (mean = .8531928900592495)
Bin #20: (.118,.12] (n = 4685) (mean = .8552828175026681)
Bin #21: (.12,.122] (n = 1666) (mean = .8625450180072028)
Bin #22: (.122,.124] (n = 4809) (mean = .8615096693699313)
Bin #23: (.124,.126] (n = 1589) (mean = .8514789175582127)
Bin #24: (.126,.128] (n = 3171) (mean = .8574582150741091)
Bin #25: (.128,.13] (n = 4785) (mean = .8526645768025078)
Bin #26: (.13,.132] (n = 3215) (mean = .8600311041990669)
Bin #27: (.132,.134] (n = 1604) (mean = .8572319201995012)
Bin #28: (.134,.136] (n = 3268) (mean = .8577111383108935)
Bin #29: (.136,.138] (n = 4873) (mean = .8518366509337164)
Bin #30: (.138,.14] (n = 1590) (mean = .879874213836478)
Bin #31: (.14,.142] (n = 3307) (mean = .8672512851527063)
Bin #32: (.142,.144] (n = 4757) (mean = .8541097330250158)
Bin #33: (.144,.146] (n = 3077) (mean = .8635034124146896)
Bin #34: (.146,.148] (n = 1594) (mean = .8657465495608532)
Bin #35: (.148,.15] (n = 3272) (mean = .8701100244498777)

. 
. 
. ** Quadratic Trend
. cmogram acc bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) qfi
> tci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writin
> g\figure\acc_q.png") legend graphopts(legend(order(1 4 3) label(1 "Accident")
>  rows(1)) color(gray)) title("Quadratic Fit")

Plotting mean of acc, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .17368421052631
> 58)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .11904761904761
> 9)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .09909909909909
> 91)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .10550458715596
> 33)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .12775330396475
> 77)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .09285714285714
> 29)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .13468013468013
> 47)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .13924050632911
> 39)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .152)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .1184834123222
> 749)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .1118421052631
> 579)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .1411764705882
> 353)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .0983302411873
> 84)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .1193277310924
> 37)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .1077348066298
> 343)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .0920245398773
> 006)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .095938375350
> 1401)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .1062992125984
> 252)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .095346197502
> 8377)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .0830721003134
> 796)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .089423513390
> 8307)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .0824468085106
> 383)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .085490668272
> 1252)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .093803297328
> 0273)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .088735387885
> 2285)
Bin #1: [.08,.082] (n = 979) (mean = .0878447395301328)
Bin #2: (.082,.084] (n = 3233) (mean = .0878441076399629)
Bin #3: (.084,.086] (n = 1053) (mean = .0892687559354226)
Bin #4: (.086,.088] (n = 3467) (mean = .0833573694837035)
Bin #5: (.088,.09] (n = 1270) (mean = .0818897637795276)
Bin #6: (.09,.092] (n = 2463) (mean = .0946000812017864)
Bin #7: (.092,.094] (n = 3887) (mean = .0951890918446102)
Bin #8: (.094,.096] (n = 1324) (mean = .0740181268882175)
Bin #9: (.096,.098] (n = 4052) (mean = .0920533070088845)
Bin #10: (.098,.1] (n = 1439) (mean = .088950660180681)
Bin #11: (.1,.102] (n = 4300) (mean = .0934883720930233)
Bin #12: (.102,.104] (n = 1479) (mean = .0899256254225828)
Bin #13: (.104,.106] (n = 4525) (mean = .0992265193370166)
Bin #14: (.106,.108] (n = 1447) (mean = .0953697304768487)
Bin #15: (.108,.11] (n = 4531) (mean = .1074817920988744)
Bin #16: (.11,.112] (n = 1564) (mean = .0978260869565217)
Bin #17: (.112,.114] (n = 3139) (mean = .1086333227142402)
Bin #18: (.114,.116] (n = 4699) (mean = .1076824856352415)
Bin #19: (.116,.118] (n = 1519) (mean = .0954575378538512)
Bin #20: (.118,.12] (n = 4685) (mean = .1056563500533618)
Bin #21: (.12,.122] (n = 1666) (mean = .1236494597839136)
Bin #22: (.122,.124] (n = 4809) (mean = .116448326055313)
Bin #23: (.124,.126] (n = 1589) (mean = .1126494650723726)
Bin #24: (.126,.128] (n = 3171) (mean = .1292967518133081)
Bin #25: (.128,.13] (n = 4785) (mean = .1174503657262278)
Bin #26: (.13,.132] (n = 3215) (mean = .1213063763608087)
Bin #27: (.132,.134] (n = 1604) (mean = .1265586034912718)
Bin #28: (.134,.136] (n = 3268) (mean = .1251529987760098)
Bin #29: (.136,.138] (n = 4873) (mean = .1212805253437308)
Bin #30: (.138,.14] (n = 1590) (mean = .1408805031446541)
Bin #31: (.14,.142] (n = 3307) (mean = .12881765951013)
Bin #32: (.142,.144] (n = 4757) (mean = .136640739962161)
Bin #33: (.144,.146] (n = 3077) (mean = .1394215144621384)
Bin #34: (.146,.148] (n = 1594) (mean = .1355081555834379)
Bin #35: (.148,.15] (n = 3272) (mean = .1405867970660147)

. cmogram male bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) qf
> itci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writi
> ng\figure\male_q.png") legend graphopts(legend(order(1 4 3) label(1 "Male") r
> ows(1)) color(gray)) title("Quadratic Fit")

Plotting mean of male, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .83157894736842
> 11)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .79523809523809
> 52)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .77477477477477
> 47)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .75688073394495
> 41)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .77973568281938
> 32)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .78928571428571
> 43)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .80471380471380
> 47)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .81223628691983
> 12)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .82133333333333
> 34)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .7914691943127
> 962)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .7916666666666
> 666)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .7490196078431
> 373)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .8033395176252
> 319)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .7781512605042
> 017)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .8093922651933
> 702)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .8159509202453
> 987)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .768907563025
> 2101)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .7401574803149
> 606)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .766174801362
> 0885)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .7789968652037
> 618)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .781661370857
> 921)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .8231382978723
> 404)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .800722456351
> 5954)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .780557134735
> 6453)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .788522848034
> 0064)
Bin #1: [.08,.082] (n = 979) (mean = .7711950970377937)
Bin #2: (.082,.084] (n = 3233) (mean = .7819362820909372)
Bin #3: (.084,.086] (n = 1053) (mean = .7996201329534662)
Bin #4: (.086,.088] (n = 3467) (mean = .7992500721084511)
Bin #5: (.088,.09] (n = 1270) (mean = .7960629921259843)
Bin #6: (.09,.092] (n = 2463) (mean = .7726349979699554)
Bin #7: (.092,.094] (n = 3887) (mean = .7887831232312837)
Bin #8: (.094,.096] (n = 1324) (mean = .7885196374622356)
Bin #9: (.096,.098] (n = 4052) (mean = .7966436327739388)
Bin #10: (.098,.1] (n = 1439) (mean = .7956914523974983)
Bin #11: (.1,.102] (n = 4300) (mean = .8069767441860465)
Bin #12: (.102,.104] (n = 1479) (mean = .7971602434077079)
Bin #13: (.104,.106] (n = 4525) (mean = .7882872928176795)
Bin #14: (.106,.108] (n = 1447) (mean = .8147892190739461)
Bin #15: (.108,.11] (n = 4531) (mean = .797837122048113)
Bin #16: (.11,.112] (n = 1564) (mean = .790920716112532)
Bin #17: (.112,.114] (n = 3139) (mean = .7881490920675375)
Bin #18: (.114,.116] (n = 4699) (mean = .7935731006597149)
Bin #19: (.116,.118] (n = 1519) (mean = .7801184990125082)
Bin #20: (.118,.12] (n = 4685) (mean = .792102454642476)
Bin #21: (.12,.122] (n = 1666) (mean = .8199279711884754)
Bin #22: (.122,.124] (n = 4809) (mean = .7903930131004366)
Bin #23: (.124,.126] (n = 1589) (mean = .7816236626809314)
Bin #24: (.126,.128] (n = 3171) (mean = .7984862819299905)
Bin #25: (.128,.13] (n = 4785) (mean = .7914315569487983)
Bin #26: (.13,.132] (n = 3215) (mean = .7975116640746501)
Bin #27: (.132,.134] (n = 1604) (mean = .7899002493765586)
Bin #28: (.134,.136] (n = 3268) (mean = .8026315789473685)
Bin #29: (.136,.138] (n = 4873) (mean = .7937615431972092)
Bin #30: (.138,.14] (n = 1590) (mean = .8050314465408805)
Bin #31: (.14,.142] (n = 3307) (mean = .7892349561536135)
Bin #32: (.142,.144] (n = 4757) (mean = .784528063905823)
Bin #33: (.144,.146] (n = 3077) (mean = .783230419239519)
Bin #34: (.146,.148] (n = 1594) (mean = .8067754077791719)
Bin #35: (.148,.15] (n = 3272) (mean = .784841075794621)

. cmogram age bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) qfi
> tci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writin
> g\figure\age_q.png") legend graphopts(legend(order(1 4 3) label(1 "Age") rows
> (1)) color(gray)) title("Quadratic Fit")

Plotting mean of aged, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = 37.310526315789
> 47)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = 38.252380952380
> 95)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = 36.833333333333
> 34)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = 36.215596330275
> 23)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = 37.881057268722
> 46)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = 37.110714285714
> 29)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = 36.181818181818
> 18)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = 36.107594936708
> 86)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = 36.093333333333
> 33)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = 36.19431279620
> 853)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = 35.93640350877
> 193)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = 34.96862745098
> 039)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = 34.91651205936
> 92)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = 35.45210084033
> 614)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = 35.05386740331
> 492)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = 35.23067484662
> 577)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = 35.0021008403
> 3613)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = 34.38779527559
> 055)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = 34.8825198637
> 9115)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = 34.72884012539
> 185)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = 34.4412165229
> 2328)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = 34.12898936170
> 212)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = 34.1583383503
> 9133)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = 34.6384309266
> 6288)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = 33.7662061636
> 5569)
Bin #1: [.08,.082] (n = 979) (mean = 34.34320735444331)
Bin #2: (.082,.084] (n = 3233) (mean = 33.92483761212496)
Bin #3: (.084,.086] (n = 1053) (mean = 33.66856600189934)
Bin #4: (.086,.088] (n = 3467) (mean = 33.67637727141621)
Bin #5: (.088,.09] (n = 1270) (mean = 33.84488188976378)
Bin #6: (.09,.092] (n = 2463) (mean = 33.70361347949655)
Bin #7: (.092,.094] (n = 3887) (mean = 34.10393619758168)
Bin #8: (.094,.096] (n = 1324) (mean = 34.01737160120846)
Bin #9: (.096,.098] (n = 4052) (mean = 33.80676209279368)
Bin #10: (.098,.1] (n = 1439) (mean = 34.20361362056984)
Bin #11: (.1,.102] (n = 4300) (mean = 34.1093023255814)
Bin #12: (.102,.104] (n = 1479) (mean = 33.4604462474645)
Bin #13: (.104,.106] (n = 4525) (mean = 33.82696132596685)
Bin #14: (.106,.108] (n = 1447) (mean = 33.69523151347616)
Bin #15: (.108,.11] (n = 4531) (mean = 33.76914588391084)
Bin #16: (.11,.112] (n = 1564) (mean = 34.04092071611253)
Bin #17: (.112,.114] (n = 3139) (mean = 33.63459700541573)
Bin #18: (.114,.116] (n = 4699) (mean = 34.10661842945308)
Bin #19: (.116,.118] (n = 1519) (mean = 34.1909150757077)
Bin #20: (.118,.12] (n = 4685) (mean = 33.91824973319103)
Bin #21: (.12,.122] (n = 1666) (mean = 34.6578631452581)
Bin #22: (.122,.124] (n = 4809) (mean = 33.96069868995633)
Bin #23: (.124,.126] (n = 1589) (mean = 34.04216488357458)
Bin #24: (.126,.128] (n = 3171) (mean = 34.35950804162724)
Bin #25: (.128,.13] (n = 4785) (mean = 34.24514106583072)
Bin #26: (.13,.132] (n = 3215) (mean = 33.87682737169518)
Bin #27: (.132,.134] (n = 1604) (mean = 33.76620947630923)
Bin #28: (.134,.136] (n = 3268) (mean = 34.04651162790697)
Bin #29: (.136,.138] (n = 4873) (mean = 34.23394213010466)
Bin #30: (.138,.14] (n = 1590) (mean = 34.30377358490566)
Bin #31: (.14,.142] (n = 3307) (mean = 34.25491381917146)
Bin #32: (.142,.144] (n = 4757) (mean = 34.33025015766239)
Bin #33: (.144,.146] (n = 3077) (mean = 34.26746831329217)
Bin #34: (.146,.148] (n = 1594) (mean = 34.60351317440401)
Bin #35: (.148,.15] (n = 3272) (mean = 34.65006112469437)

. cmogram white bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.08) q
> fitci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\writ
> ing\figure\white_q.png")legend graphopts(legend(order(1 4 3) label(1 "White")
>  rows(1)) color(gray)) title("Quadratic Fit")

Plotting mean of white, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .79473684210526
> 32)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .87619047619047
> 62)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .81531531531531
> 53)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .85321100917431
> 19)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .84140969162995
> 59)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .84642857142857
> 14)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .85521885521885
> 52)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .87341772151898
> 73)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .84533333333333
> 34)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .8270142180094
> 787)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .8442982456140
> 351)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .8352941176470
> 589)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .8497217068645
> 641)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .8655462184873
> 95)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .8480662983425
> 414)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .8319018404907
> 975)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .848039215686
> 2745)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .8267716535433
> 071)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .841657207718
> 5017)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .8526645768025
> 078)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .834770767135
> 7241)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .8364361702127
> 66)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .857314870559
> 9036)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .843661171119
> 9545)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .852816153028
> 6928)
Bin #1: [.08,.082] (n = 979) (mean = .8723186925434117)
Bin #2: (.082,.084] (n = 3233) (mean = .8530776368697804)
Bin #3: (.084,.086] (n = 1053) (mean = .8603988603988604)
Bin #4: (.086,.088] (n = 3467) (mean = .8505912892991059)
Bin #5: (.088,.09] (n = 1270) (mean = .8448818897637795)
Bin #6: (.09,.092] (n = 2463) (mean = .8534307754770605)
Bin #7: (.092,.094] (n = 3887) (mean = .8471829174170311)
Bin #8: (.094,.096] (n = 1324) (mean = .8527190332326284)
Bin #9: (.096,.098] (n = 4052) (mean = .8499506416584403)
Bin #10: (.098,.1] (n = 1439) (mean = .8665740097289785)
Bin #11: (.1,.102] (n = 4300) (mean = .8490697674418605)
Bin #12: (.102,.104] (n = 1479) (mean = .8586883029073699)
Bin #13: (.104,.106] (n = 4525) (mean = .8552486187845304)
Bin #14: (.106,.108] (n = 1447) (mean = .8507256392536282)
Bin #15: (.108,.11] (n = 4531) (mean = .8538953873317149)
Bin #16: (.11,.112] (n = 1564) (mean = .8465473145780051)
Bin #17: (.112,.114] (n = 3139) (mean = .8684294361261549)
Bin #18: (.114,.116] (n = 4699) (mean = .8525218131517344)
Bin #19: (.116,.118] (n = 1519) (mean = .8531928900592495)
Bin #20: (.118,.12] (n = 4685) (mean = .8552828175026681)
Bin #21: (.12,.122] (n = 1666) (mean = .8625450180072028)
Bin #22: (.122,.124] (n = 4809) (mean = .8615096693699313)
Bin #23: (.124,.126] (n = 1589) (mean = .8514789175582127)
Bin #24: (.126,.128] (n = 3171) (mean = .8574582150741091)
Bin #25: (.128,.13] (n = 4785) (mean = .8526645768025078)
Bin #26: (.13,.132] (n = 3215) (mean = .8600311041990669)
Bin #27: (.132,.134] (n = 1604) (mean = .8572319201995012)
Bin #28: (.134,.136] (n = 3268) (mean = .8577111383108935)
Bin #29: (.136,.138] (n = 4873) (mean = .8518366509337164)
Bin #30: (.138,.14] (n = 1590) (mean = .879874213836478)
Bin #31: (.14,.142] (n = 3307) (mean = .8672512851527063)
Bin #32: (.142,.144] (n = 4757) (mean = .8541097330250158)
Bin #33: (.144,.146] (n = 3077) (mean = .8635034124146896)
Bin #34: (.146,.148] (n = 1594) (mean = .8657465495608532)
Bin #35: (.148,.15] (n = 3272) (mean = .8701100244498777)

. 
. 
. *7
. ** Panel A
. eststo clear

. 
. eststo: reg recidivism male white aged BAC i.DUI i.year if bac1>=0.03 & bac1<
> =0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(13, 99)         =      50.52
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0044
                                                Root MSE          =     .30838

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
  recidivism |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
        male |   .0324704   .0023622    13.75   0.000     .0277833    .0371575
       white |   .0143843   .0028696     5.01   0.000     .0086904    .0200783
        aged |  -.0008496   .0000856    -9.93   0.000    -.0010194   -.0006798
         BAC |   .3130768   .0635228     4.93   0.000     .1870337    .4391198
       1.DUI |  -.0271199   .0032184    -8.43   0.000     -.033506   -.0207339
             |
        year |
       2000  |   .0055054   .0052433     1.05   0.296    -.0048984    .0159092
       2001  |    .009517   .0053468     1.78   0.078    -.0010922    .0201263
       2002  |  -.0028621   .0054092    -0.53   0.598    -.0135952     .007871
       2003  |  -.0038903    .004973    -0.78   0.436    -.0137578    .0059772
       2004  |  -.0059673   .0043435    -1.37   0.173    -.0145858    .0026511
       2005  |  -.0090111   .0048351    -1.86   0.065     -.018605    .0005829
       2006  |  -.0023799   .0051984    -0.46   0.648    -.0126946    .0079348
       2007  |  -.0234682   .0044049    -5.33   0.000    -.0322085   -.0147279
             |
       _cons |   .1181217    .006441    18.34   0.000     .1053413    .1309021
------------------------------------------------------------------------------
(est1 stored)

. predict y_hat1
(option xb assumed; fitted values)

. estadd scalar mean = y_hat1

added scalar:
               e(mean) =  .07568005

. eststo: reg recidivism male white aged c.BAC##i.DUI i.year if bac1>=0.03 & ba
> c1<=0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(14, 99)         =      46.61
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0044
                                                Root MSE          =     .30838

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
  recidivism |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
        male |    .032455   .0023632    13.73   0.000      .027766     .037144
       white |   .0144004   .0028726     5.01   0.000     .0087004    .0201003
        aged |  -.0008559   .0000855   -10.01   0.000    -.0010256   -.0006863
         BAC |  -.0390801   .1475086    -0.26   0.792    -.3317691    .2536089
       1.DUI |  -.0239107   .0031333    -7.63   0.000    -.0301278   -.0176936
             |
   DUI#c.BAC |
          1  |   .4238974   .1627196     2.61   0.011     .1010264    .7467683
             |
        year |
       2000  |   .0055199   .0052457     1.05   0.295    -.0048887    .0159285
       2001  |   .0094713   .0053456     1.77   0.080    -.0011355    .0200781
       2002  |  -.0028297   .0054107    -0.52   0.602    -.0135657    .0079064
       2003  |  -.0038691   .0049726    -0.78   0.438    -.0137358    .0059976
       2004  |  -.0058854   .0043429    -1.36   0.178    -.0145027    .0027319
       2005  |  -.0089327   .0048315    -1.85   0.067    -.0185194    .0006541
       2006  |  -.0023219   .0051982    -0.45   0.656    -.0126363    .0079926
       2007  |   -.023399   .0044085    -5.31   0.000    -.0321464   -.0146517
             |
       _cons |   .1131346   .0063717    17.76   0.000     .1004917    .1257775
------------------------------------------------------------------------------
(est2 stored)

. predict y_hat2
(option xb assumed; fitted values)

. estadd scalar mean = y_hat2

added scalar:
               e(mean) =  .09863179

. gen BAC2 = BAC*BAC

. eststo: reg recidivism male white aged (c.BAC c.BAC2)##i.DUI i.year if bac1>=
> 0.03 & bac1<=0.13, cluster(BAC)

Linear regression                               Number of obs     =     89,967
                                                F(16, 99)         =      42.24
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0045
                                                Root MSE          =     .30837

                                  (Std. Err. adjusted for 100 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
  recidivism |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
        male |   .0324866   .0023606    13.76   0.000     .0278027    .0371705
       white |   .0143979   .0028722     5.01   0.000     .0086989     .020097
        aged |   -.000856   .0000855   -10.01   0.000    -.0010257   -.0006864
         BAC |  -1.077608   .4239236    -2.54   0.013    -1.918764   -.2364516
        BAC2 |  -25.42113   10.55054    -2.41   0.018    -46.35569    -4.48657
       1.DUI |  -.0140854   .0038217    -3.69   0.000    -.0216684   -.0065024
             |
   DUI#c.BAC |
          1  |   1.044954     .51983     2.01   0.047     .0134985    2.076409
             |
  DUI#c.BAC2 |
          1  |   33.36566   12.00296     2.78   0.007      9.54918    57.18215
             |
        year |
       2000  |   .0055493   .0052474     1.06   0.293    -.0048627    .0159612
       2001  |   .0094562   .0053463     1.77   0.080     -.001152    .0200643
       2002  |   -.002854   .0054138    -0.53   0.599    -.0135961    .0078881
       2003  |  -.0038634   .0049673    -0.78   0.439    -.0137196    .0059927
       2004  |  -.0058761   .0043452    -1.35   0.179     -.014498    .0027457
       2005  |  -.0089362   .0048337    -1.85   0.067    -.0185273    .0006549
       2006  |  -.0023351   .0051996    -0.45   0.654    -.0126521    .0079819
       2007  |  -.0234338   .0044127    -5.31   0.000    -.0321895    -.014678
             |
       _cons |   .1072036   .0058876    18.21   0.000     .0955214    .1188859
------------------------------------------------------------------------------
(est3 stored)

. predict y_hat3
(option xb assumed; fitted values)

. estadd scalar mean = y_hat3

added scalar:
               e(mean) =  .01307793

. 
. esttab using C:\Users\omasa\Documents\GitHub\RDD\writing\table\table3A.tex, i
> ndicate(Controls = male white aged) replace booktabs width(0.7\hsize) b(3) se
>  star not drop(*.year BAC BAC2 0.DUI 0.DUI#c.BAC 0.DUI#c.BAC2 1.DUI#c.BAC 1.D
> UI#c.BAC2 _cons) stats(mean N, labels("Mean" Observations) fmt(%4.3f %8.0gc))
>  rename(1.DUI DUI) varwidth(15) collabels(none) refcat(DUI "\textit{Panel A: 
> BAC} $\in$ [0.03, 0.13]", nolabel) mtitles("(1)" "(2)" "(3)") nonumbers starl
> evels( * 0.10 ** 0.05 *** 0.010) postfoot(\end{tabular*}}) prefoot("")
(output written to C:\Users\omasa\Documents\GitHub\RDD\writing\table\table3A.te
> x)

. 
. ** Panel B
. drop(y_hat1 y_hat2 y_hat3)

. eststo clear

. 
. eststo: reg recidivism male white aged BAC i.DUI i.year if bac1>=0.055 & bac1
> <=0.105, cluster(BAC)

Linear regression                               Number of obs     =     46,957
                                                F(13, 49)         =      37.97
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0048
                                                Root MSE          =     .30615

                                   (Std. Err. adjusted for 50 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
  recidivism |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
        male |   .0347478   .0030602    11.35   0.000     .0285981    .0408975
       white |   .0155675   .0035977     4.33   0.000     .0083377    .0227973
        aged |  -.0007578   .0001209    -6.27   0.000    -.0010008   -.0005148
         BAC |   .1738575   .1349595     1.29   0.204    -.0973537    .4450687
       1.DUI |  -.0216609   .0034881    -6.21   0.000    -.0286704   -.0146513
             |
        year |
       2000  |   .0097533   .0062175     1.57   0.123    -.0027411    .0222478
       2001  |   .0034396    .007917     0.43   0.666    -.0124701    .0193494
       2002  |  -.0035391   .0080915    -0.44   0.664    -.0197996    .0127213
       2003  |  -.0046691   .0075393    -0.62   0.539    -.0198199    .0104816
       2004  |  -.0089789   .0066826    -1.34   0.185     -.022408    .0044502
       2005  |  -.0087948    .007012    -1.25   0.216    -.0228859    .0052963
       2006  |  -.0066051   .0074435    -0.89   0.379    -.0215634    .0083532
       2007  |  -.0248701   .0063677    -3.91   0.000    -.0376665   -.0120737
             |
       _cons |   .1100924   .0081306    13.54   0.000     .0937533    .1264315
------------------------------------------------------------------------------
(est1 stored)

. predict y_hat1
(option xb assumed; fitted values)

. estadd scalar mean = y_hat1

added scalar:
               e(mean) =  .08525454

. eststo: reg recidivism male white aged c.BAC##i.DUI i.year if bac1>=0.055 & b
> ac1<=0.105, cluster(BAC)

Linear regression                               Number of obs     =     46,957
                                                F(14, 49)         =      35.15
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0048
                                                Root MSE          =     .30615

                                   (Std. Err. adjusted for 50 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
  recidivism |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
        male |   .0347305   .0030586    11.35   0.000     .0285839     .040877
       white |    .015591   .0035976     4.33   0.000     .0083613    .0228206
        aged |  -.0007603   .0001208    -6.29   0.000    -.0010031   -.0005175
         BAC |  -.2052601   .2770188    -0.74   0.462    -.7619502      .35143
       1.DUI |  -.0203094   .0033512    -6.06   0.000     -.027044   -.0135749
             |
   DUI#c.BAC |
          1  |   .5413501   .3081821     1.76   0.085    -.0779652    1.160665
             |
        year |
       2000  |   .0097545   .0062191     1.57   0.123    -.0027432    .0222522
       2001  |   .0034547   .0079097     0.44   0.664    -.0124405    .0193499
       2002  |  -.0035472   .0080959    -0.44   0.663    -.0198166    .0127222
       2003  |   -.004646   .0075307    -0.62   0.540    -.0197795    .0104874
       2004  |  -.0089434   .0066755    -1.34   0.187    -.0223584    .0044716
       2005  |  -.0087435   .0070013    -1.25   0.218    -.0228132    .0053262
       2006  |  -.0065596   .0074365    -0.88   0.382    -.0215039    .0083847
       2007  |  -.0248508    .006368    -3.90   0.000    -.0376477   -.0120538
             |
       _cons |   .1065508   .0077227    13.80   0.000     .0910315      .12207
------------------------------------------------------------------------------
(est2 stored)

. predict y_hat2
(option xb assumed; fitted values)

. estadd scalar mean = y_hat2

added scalar:
               e(mean) =  .11195014

. eststo: reg recidivism male white aged (c.BAC c.BAC2)##i.DUI i.year if bac1>=
> 0.055 & bac1<=0.105, cluster(BAC)

Linear regression                               Number of obs     =     46,957
                                                F(16, 49)         =      33.77
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0048
                                                Root MSE          =     .30615

                                   (Std. Err. adjusted for 50 clusters in BAC)
------------------------------------------------------------------------------
             |               Robust
  recidivism |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
        male |   .0347639   .0030593    11.36   0.000     .0286159    .0409118
       white |   .0155869   .0035904     4.34   0.000     .0083718    .0228021
        aged |  -.0007606   .0001209    -6.29   0.000    -.0010036   -.0005175
         BAC |  -1.205946   .9227922    -1.31   0.197    -3.060366    .6484747
        BAC2 |  -45.74325   42.13478    -1.09   0.283    -130.4163    38.92976
       1.DUI |  -.0138025   .0040052    -3.45   0.001    -.0218513   -.0057537
             |
   DUI#c.BAC |
          1  |    .858674   1.052384     0.82   0.418     -1.25617    2.973518
             |
  DUI#c.BAC2 |
          1  |   71.34992   46.35615     1.54   0.130    -21.80625    164.5061
             |
        year |
       2000  |    .009746   .0062169     1.57   0.123    -.0027473    .0222393
       2001  |    .003469   .0079118     0.44   0.663    -.0124303    .0193684
       2002  |  -.0035553   .0080971    -0.44   0.663    -.0198271    .0127165
       2003  |  -.0046663   .0075264    -0.62   0.538    -.0197911    .0104585
       2004  |  -.0089236    .006675    -1.34   0.187    -.0223375    .0044904
       2005  |  -.0087508   .0069952    -1.25   0.217    -.0228082    .0053066
       2006  |  -.0065792   .0074376    -0.88   0.381    -.0215257    .0083672
       2007  |  -.0248585   .0063733    -3.90   0.000    -.0376662   -.0120508
             |
       _cons |   .1032854   .0072918    14.16   0.000      .088632    .1179389
------------------------------------------------------------------------------
(est3 stored)

. predict y_hat3
(option xb assumed; fitted values)

. estadd scalar mean = y_hat3

added scalar:
               e(mean) =  -.10401038

. 
. esttab using C:\Users\omasa\Documents\GitHub\RDD\writing\table\table3.tex, in
> dicate(Controls = male white aged) replace booktabs width(0.7\hsize) b(3) se 
> star not drop(*.year BAC BAC2 0.DUI 0.DUI#c.BAC 0.DUI#c.BAC2 1.DUI#c.BAC 1.DU
> I#c.BAC2 _cons) stats(mean N, labels("Mean" Observations) fmt(%4.3f %8.0gc)) 
> rename(1.DUI DUI) varwidth(15) collabels(none) refcat(DUI "\textit{Panel B: B
> AC} $\in$ [0.055, 0.105]", nolabel) mtitles("(1)" "(2)" "(3)") nonumbers topf
> ile(C:\Users\omasa\Documents\GitHub\RDD\writing\table\table3A.tex) mlabels(no
> ne) starlevels( * 0.10 ** 0.05 *** 0.010) prehead({\def\sym#1{\ifmmode^{#1}\e
> lse\(^{#1}\)\fi} \begin{tabular*}{0.7\hsize}{@{\hskip\tabcolsep\extracolsep\f
> ill}l*{3}{c}}) posthead("") prefoot("")
(output written to C:\Users\omasa\Documents\GitHub\RDD\writing\table\table3.tex
> )

. 
. *8
. ** 1
. cmogram recidivism bac1 if bac1>=0.03 & bac1<=0.15, cut(0.08) scatter line(0.
> 08) lfitci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD
> \writing\figure\recid_l.png") legend graphopts(legend(order(1 4 3) label(1 "R
> ecidivism") rows(1)) color(gray)) title("Recidivism: Linear Fit")

Plotting mean of recidivism, conditional on bac1.

n = 120524

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .07894736842105
> 26)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .1)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .09459459459459
> 46)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .11926605504587
> 16)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .10572687224669
> 6)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .11428571428571
> 43)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .13468013468013
> 47)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .13502109704641
> 35)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .128)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .1255924170616
> 114)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .1118421052631
> 579)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .1215686274509
> 804)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .1150278293135
> 436)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .1159663865546
> 219)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .1146408839779
> 006)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .1349693251533
> 742)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .111344537815
> 1261)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .1181102362204
> 724)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .124858115777
> 5255)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .1097178683385
> 58)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .118020880617
> 34)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .1077127659574
> 468)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .114990969295
> 6051)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .118249005116
> 5435)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .112114771519
> 6599)
Bin #1: [.08,.082] (n = 979) (mean = .0990806945863126)
Bin #2: (.082,.084] (n = 3233) (mean = .0974327250231983)
Bin #3: (.084,.086] (n = 1053) (mean = .1016144349477683)
Bin #4: (.086,.088] (n = 3467) (mean = .0931641188347274)
Bin #5: (.088,.09] (n = 1270) (mean = .1)
Bin #6: (.09,.092] (n = 2463) (mean = .096630125862769)
Bin #7: (.092,.094] (n = 3887) (mean = .1026498585027013)
Bin #8: (.094,.096] (n = 1324) (mean = .1004531722054381)
Bin #9: (.096,.098] (n = 4052) (mean = .0967423494570582)
Bin #10: (.098,.1] (n = 1439) (mean = .1021542738012509)
Bin #11: (.1,.102] (n = 4300) (mean = .1030232558139535)
Bin #12: (.102,.104] (n = 1479) (mean = .1041244083840433)
Bin #13: (.104,.106] (n = 4525) (mean = .0983425414364641)
Bin #14: (.106,.108] (n = 1447) (mean = .0912232204561161)
Bin #15: (.108,.11] (n = 4531) (mean = .1061575811079232)
Bin #16: (.11,.112] (n = 1564) (mean = .0978260869565217)
Bin #17: (.112,.114] (n = 3139) (mean = .0974832749283211)
Bin #18: (.114,.116] (n = 4699) (mean = .11406682272824)
Bin #19: (.116,.118] (n = 1519) (mean = .1138907175773535)
Bin #20: (.118,.12] (n = 4685) (mean = .1127001067235859)
Bin #21: (.12,.122] (n = 1666) (mean = .1002400960384154)
Bin #22: (.122,.124] (n = 4809) (mean = .1091703056768559)
Bin #23: (.124,.126] (n = 1589) (mean = .1107614852108244)
Bin #24: (.126,.128] (n = 3171) (mean = .1113213497319458)
Bin #25: (.128,.13] (n = 4785) (mean = .1172413793103448)
Bin #26: (.13,.132] (n = 3215) (mean = .102954898911353)
Bin #27: (.132,.134] (n = 1604) (mean = .1066084788029925)
Bin #28: (.134,.136] (n = 3268) (mean = .1193390452876377)
Bin #29: (.136,.138] (n = 4873) (mean = .1085573568643546)
Bin #30: (.138,.14] (n = 1590) (mean = .1238993710691824)
Bin #31: (.14,.142] (n = 3307) (mean = .1236770486846084)
Bin #32: (.142,.144] (n = 4757) (mean = .1177212528904772)
Bin #33: (.144,.146] (n = 3077) (mean = .1095222619434514)
Bin #34: (.146,.148] (n = 1594) (mean = .1066499372647428)
Bin #35: (.148,.15] (n = 3272) (mean = .1271393643031785)

. ** 2
. cmogram recidivism bac1 if bac1>=0.03 & bac1<=0.2, cut(0.08) scatter line(0.0
> 8) qfitci histopts(width(0.002)) saving("C:\Users\omasa\Documents\GitHub\RDD\
> writing\figure\recid_q.png") legend graphopts(legend(order(1 4 3) label(1 "Re
> cidivism") rows(1)) color(gray)) title("Recidivism: Quadratic Fit")

Plotting mean of recidivism, conditional on bac1.

n = 180984

Bin #1: [.0309999994933605,.0329999994933605] (n = 190) (mean = .07894736842105
> 26)
Bin #2: (.0329999994933605,.0349999994933605] (n = 210) (mean = .1)
Bin #3: (.0349999994933605,.0369999994933605] (n = 222) (mean = .09459459459459
> 46)
Bin #4: (.0369999994933605,.0389999994933605] (n = 218) (mean = .11926605504587
> 16)
Bin #5: (.0389999994933605,.0409999994933605] (n = 227) (mean = .10572687224669
> 6)
Bin #6: (.0409999994933605,.0429999994933605] (n = 280) (mean = .11428571428571
> 43)
Bin #7: (.0429999994933605,.0449999994933605] (n = 297) (mean = .13468013468013
> 47)
Bin #8: (.0449999994933605,.0469999994933605] (n = 474) (mean = .13502109704641
> 35)
Bin #9: (.0469999994933605,.0489999994933605] (n = 375) (mean = .128)
Bin #10: (.0489999994933605,.0509999994933605] (n = 422) (mean = .1255924170616
> 114)
Bin #11: (.0509999994933605,.0529999994933605] (n = 456) (mean = .1118421052631
> 579)
Bin #12: (.0529999994933605,.0549999994933605] (n = 255) (mean = .1215686274509
> 804)
Bin #13: (.0549999994933605,.0569999994933605] (n = 539) (mean = .1150278293135
> 436)
Bin #14: (.0569999994933605,.0589999994933605] (n = 595) (mean = .1159663865546
> 219)
Bin #15: (.0589999994933605,.0609999994933605] (n = 724) (mean = .1146408839779
> 006)
Bin #16: (.0609999994933605,.0629999994933605] (n = 815) (mean = .1349693251533
> 742)
Bin #17: (.0629999994933605,.0649999994933605] (n = 1428) (mean = .111344537815
> 1261)
Bin #18: (.0649999994933605,.0669999994933605] (n = 508) (mean = .1181102362204
> 724)
Bin #19: (.0669999994933605,.0689999994933605] (n = 1762) (mean = .124858115777
> 5255)
Bin #20: (.0689999994933605,.0709999994933605] (n = 638) (mean = .1097178683385
> 58)
Bin #21: (.0709999994933605,.0729999994933605] (n = 2203) (mean = .118020880617
> 34)
Bin #22: (.0729999994933605,.0749999994933605] (n = 752) (mean = .1077127659574
> 468)
Bin #23: (.0749999994933605,.0769999994933605] (n = 1661) (mean = .114990969295
> 6051)
Bin #24: (.0769999994933605,.0789999994933605] (n = 1759) (mean = .118249005116
> 5435)
Bin #25: (.0789999994933605,.0809999994933605] (n = 1882) (mean = .112114771519
> 6599)
Bin #1: [.08,.082] (n = 979) (mean = .0990806945863126)
Bin #2: (.082,.084] (n = 3233) (mean = .0974327250231983)
Bin #3: (.084,.086] (n = 1053) (mean = .1016144349477683)
Bin #4: (.086,.088] (n = 3467) (mean = .0931641188347274)
Bin #5: (.088,.09] (n = 1270) (mean = .1)
Bin #6: (.09,.092] (n = 2463) (mean = .096630125862769)
Bin #7: (.092,.094] (n = 3887) (mean = .1026498585027013)
Bin #8: (.094,.096] (n = 1324) (mean = .1004531722054381)
Bin #9: (.096,.098] (n = 4052) (mean = .0967423494570582)
Bin #10: (.098,.1] (n = 1439) (mean = .1021542738012509)
Bin #11: (.1,.102] (n = 4300) (mean = .1030232558139535)
Bin #12: (.102,.104] (n = 1479) (mean = .1041244083840433)
Bin #13: (.104,.106] (n = 4525) (mean = .0983425414364641)
Bin #14: (.106,.108] (n = 1447) (mean = .0912232204561161)
Bin #15: (.108,.11] (n = 4531) (mean = .1061575811079232)
Bin #16: (.11,.112] (n = 1564) (mean = .0978260869565217)
Bin #17: (.112,.114] (n = 3139) (mean = .0974832749283211)
Bin #18: (.114,.116] (n = 4699) (mean = .11406682272824)
Bin #19: (.116,.118] (n = 1519) (mean = .1138907175773535)
Bin #20: (.118,.12] (n = 4685) (mean = .1127001067235859)
Bin #21: (.12,.122] (n = 1666) (mean = .1002400960384154)
Bin #22: (.122,.124] (n = 4809) (mean = .1091703056768559)
Bin #23: (.124,.126] (n = 1589) (mean = .1107614852108244)
Bin #24: (.126,.128] (n = 3171) (mean = .1113213497319458)
Bin #25: (.128,.13] (n = 4785) (mean = .1172413793103448)
Bin #26: (.13,.132] (n = 3215) (mean = .102954898911353)
Bin #27: (.132,.134] (n = 1604) (mean = .1066084788029925)
Bin #28: (.134,.136] (n = 3268) (mean = .1193390452876377)
Bin #29: (.136,.138] (n = 4873) (mean = .1085573568643546)
Bin #30: (.138,.14] (n = 1590) (mean = .1238993710691824)
Bin #31: (.14,.142] (n = 3307) (mean = .1236770486846084)
Bin #32: (.142,.144] (n = 4757) (mean = .1177212528904772)
Bin #33: (.144,.146] (n = 3077) (mean = .1095222619434514)
Bin #34: (.146,.148] (n = 1594) (mean = .1066499372647428)
Bin #35: (.148,.15] (n = 3272) (mean = .1271393643031785)
Bin #36: (.15,.152] (n = 4492) (mean = .1219946571682992)
Bin #37: (.152,.154] (n = 3008) (mean = .1117021276595745)
Bin #38: (.154,.156] (n = 1530) (mean = .1163398692810458)
Bin #39: (.156,.158] (n = 2935) (mean = .1141396933560477)
Bin #40: (.158,.16] (n = 4524) (mean = .1083112290008842)
Bin #41: (.16,.162] (n = 1399) (mean = .1336669049320943)
Bin #42: (.162,.164] (n = 2747) (mean = .109574080815435)
Bin #43: (.164,.166] (n = 4028) (mean = .1196623634558093)
Bin #44: (.166,.168] (n = 2724) (mean = .1273861967694567)
Bin #45: (.168,.17] (n = 1287) (mean = .1212121212121212)
Bin #46: (.17,.172] (n = 2611) (mean = .1210264266564535)
Bin #47: (.172,.174] (n = 3782) (mean = .1192490745637229)
Bin #48: (.174,.176] (n = 2372) (mean = .1231028667790894)
Bin #49: (.176,.178] (n = 1135) (mean = .1171806167400881)
Bin #50: (.178,.18] (n = 2413) (mean = .1226688769167012)
Bin #51: (.18,.182] (n = 3301) (mean = .1217812784004847)
Bin #52: (.182,.184] (n = 1044) (mean = .1293103448275862)
Bin #53: (.184,.186] (n = 2072) (mean = .1269305019305019)
Bin #54: (.186,.188] (n = 3087) (mean = .1337868480725624)
Bin #55: (.188,.19] (n = 2006) (mean = .1281156530408774)
Bin #56: (.19,.192] (n = 978) (mean = .1247443762781186)
Bin #57: (.192,.194] (n = 1841) (mean = .1319934818033677)
Bin #58: (.194,.196] (n = 2660) (mean = .131578947368421)
Bin #59: (.196,.198] (n = 1684) (mean = .1395486935866983)
Bin #60: (.198,.2] (n = 800) (mean = .1225)

. 
end of do-file
